"""add unique constraint on broker(owner_user_id, name)

Revision ID: 274ad99a0574
Revises: 91f531ceddf2
Create Date: 2025-09-19 18:25:58.259405

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '274ad99a0574'
down_revision: Union[str, Sequence[str], None] = '91f531ceddf2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_accountmovement_as_of_date', table_name='accountmovement')
    op.drop_index('ix_accountmovement_created_at', table_name='accountmovement')
    op.drop_index('ix_accountmovement_from_account_id', table_name='accountmovement')
    op.drop_index('ix_accountmovement_to_account_id', table_name='accountmovement')
    op.drop_index('ix_accountmovement_type', table_name='accountmovement')
    op.drop_table('accountmovement')
    op.create_unique_constraint('uq_broker_owner_name', 'broker', ['owner_user_id', 'name'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('uq_broker_owner_name', 'broker', type_='unique')
    op.create_table('accountmovement',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('as_of_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('note', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('from_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('to_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('amount_input', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('delta_from', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('delta_to', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('from_currency', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('to_currency', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('fx_rate_used', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fx_source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['from_account_id'], ['account.id'], name='accountmovement_from_account_id_fkey'),
    sa.ForeignKeyConstraint(['to_account_id'], ['account.id'], name='accountmovement_to_account_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='accountmovement_pkey')
    )
    op.create_index('ix_accountmovement_type', 'accountmovement', ['type'], unique=False)
    op.create_index('ix_accountmovement_to_account_id', 'accountmovement', ['to_account_id'], unique=False)
    op.create_index('ix_accountmovement_from_account_id', 'accountmovement', ['from_account_id'], unique=False)
    op.create_index('ix_accountmovement_created_at', 'accountmovement', ['created_at'], unique=False)
    op.create_index('ix_accountmovement_as_of_date', 'accountmovement', ['as_of_date'], unique=False)
    # ### end Alembic commands ###
