"""sync models

Revision ID: b7394542c181
Revises: 
Create Date: 2025-08-21 19:19:46.702712

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b7394542c181'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_accountmovement_as_of_date'), table_name='accountmovement')
    op.drop_index(op.f('ix_accountmovement_created_at'), table_name='accountmovement')
    op.drop_index(op.f('ix_accountmovement_from_account_id'), table_name='accountmovement')
    op.drop_index(op.f('ix_accountmovement_to_account_id'), table_name='accountmovement')
    op.drop_index(op.f('ix_accountmovement_type'), table_name='accountmovement')
    op.drop_table('accountmovement')
    op.drop_index(op.f('ix_pricehistory_instrument_id'), table_name='pricehistory')
    op.drop_index(op.f('ix_pricehistory_price_date'), table_name='pricehistory')
    op.drop_table('pricehistory')
    op.add_column('account', sa.Column('org_id', sa.Integer(), nullable=True))
    op.add_column('account', sa.Column('owner_user_id', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_account_org_id'), 'account', ['org_id'], unique=False)
    op.create_index(op.f('ix_account_owner_user_id'), 'account', ['owner_user_id'], unique=False)
    op.create_foreign_key(None, 'account', 'user', ['owner_user_id'], ['id'])
    op.add_column('activity', sa.Column('org_id', sa.Integer(), nullable=True))
    op.add_column('activity', sa.Column('owner_user_id', sa.Integer(), nullable=True))
    op.alter_column('activity', 'instrument_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_index(op.f('ix_activity_org_id'), 'activity', ['org_id'], unique=False)
    op.create_index(op.f('ix_activity_owner_user_id'), 'activity', ['owner_user_id'], unique=False)
    op.create_foreign_key(None, 'activity', 'user', ['owner_user_id'], ['id'])
    op.add_column('broker', sa.Column('org_id', sa.Integer(), nullable=True))
    op.add_column('broker', sa.Column('owner_user_id', sa.Integer(), nullable=True))
    op.drop_index(op.f('ix_broker_name'), table_name='broker')
    op.create_index(op.f('ix_broker_name'), 'broker', ['name'], unique=False)
    op.create_index(op.f('ix_broker_org_id'), 'broker', ['org_id'], unique=False)
    op.create_index(op.f('ix_broker_owner_user_id'), 'broker', ['owner_user_id'], unique=False)
    op.create_foreign_key(None, 'broker', 'user', ['owner_user_id'], ['id'])
    op.add_column('instrument', sa.Column('org_id', sa.Integer(), nullable=True))
    op.add_column('instrument', sa.Column('owner_user_id', sa.Integer(), nullable=True))
    op.drop_index(op.f('ix_instrument_symbol'), table_name='instrument')
    op.create_index(op.f('ix_instrument_symbol'), 'instrument', ['symbol'], unique=False)
    op.create_index(op.f('ix_instrument_org_id'), 'instrument', ['org_id'], unique=False)
    op.create_index(op.f('ix_instrument_owner_user_id'), 'instrument', ['owner_user_id'], unique=False)
    op.create_unique_constraint('uq_instrument_org_symbol', 'instrument', ['org_id', 'symbol'])
    op.create_foreign_key(None, 'instrument', 'user', ['owner_user_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'instrument', type_='foreignkey')
    op.drop_constraint('uq_instrument_org_symbol', 'instrument', type_='unique')
    op.drop_index(op.f('ix_instrument_owner_user_id'), table_name='instrument')
    op.drop_index(op.f('ix_instrument_org_id'), table_name='instrument')
    op.drop_index(op.f('ix_instrument_symbol'), table_name='instrument')
    op.create_index(op.f('ix_instrument_symbol'), 'instrument', ['symbol'], unique=True)
    op.drop_column('instrument', 'owner_user_id')
    op.drop_column('instrument', 'org_id')
    op.drop_constraint(None, 'broker', type_='foreignkey')
    op.drop_index(op.f('ix_broker_owner_user_id'), table_name='broker')
    op.drop_index(op.f('ix_broker_org_id'), table_name='broker')
    op.drop_index(op.f('ix_broker_name'), table_name='broker')
    op.create_index(op.f('ix_broker_name'), 'broker', ['name'], unique=True)
    op.drop_column('broker', 'owner_user_id')
    op.drop_column('broker', 'org_id')
    op.drop_constraint(None, 'activity', type_='foreignkey')
    op.drop_index(op.f('ix_activity_owner_user_id'), table_name='activity')
    op.drop_index(op.f('ix_activity_org_id'), table_name='activity')
    op.alter_column('activity', 'instrument_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('activity', 'owner_user_id')
    op.drop_column('activity', 'org_id')
    op.drop_constraint(None, 'account', type_='foreignkey')
    op.drop_index(op.f('ix_account_owner_user_id'), table_name='account')
    op.drop_index(op.f('ix_account_org_id'), table_name='account')
    op.drop_column('account', 'owner_user_id')
    op.drop_column('account', 'org_id')
    op.create_table('pricehistory',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('instrument_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('close', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['instrument_id'], ['instrument.id'], name=op.f('pricehistory_instrument_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('pricehistory_pkey'))
    )
    op.create_index(op.f('ix_pricehistory_price_date'), 'pricehistory', ['price_date'], unique=False)
    op.create_index(op.f('ix_pricehistory_instrument_id'), 'pricehistory', ['instrument_id'], unique=False)
    op.create_table('accountmovement',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('as_of_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('note', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('from_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('to_account_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('amount_input', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('delta_from', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('delta_to', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('from_currency', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('to_currency', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('fx_rate_used', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fx_source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['from_account_id'], ['account.id'], name=op.f('accountmovement_from_account_id_fkey')),
    sa.ForeignKeyConstraint(['to_account_id'], ['account.id'], name=op.f('accountmovement_to_account_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('accountmovement_pkey'))
    )
    op.create_index(op.f('ix_accountmovement_type'), 'accountmovement', ['type'], unique=False)
    op.create_index(op.f('ix_accountmovement_to_account_id'), 'accountmovement', ['to_account_id'], unique=False)
    op.create_index(op.f('ix_accountmovement_from_account_id'), 'accountmovement', ['from_account_id'], unique=False)
    op.create_index(op.f('ix_accountmovement_created_at'), 'accountmovement', ['created_at'], unique=False)
    op.create_index(op.f('ix_accountmovement_as_of_date'), 'accountmovement', ['as_of_date'], unique=False)
    # ### end Alembic commands ###
